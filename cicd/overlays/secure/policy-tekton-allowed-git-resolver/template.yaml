#https://access.redhat.com/solutions/7002069 - OCP will mutate to pipelines default
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  creationTimestamp: null
  name: policytektonallowedgitresolver
spec:
  crd:
    spec:
      names:
        kind: PolicyTektonAllowedGitResolver
  targets:
  - rego: |-
      package main

      default is_gatekeeper = false
      org_allowed_git_repos := ["bitbucket.com","gitlab.com"]

      #Check if we are using gatekeeper
      is_gatekeeper {
        has_field(input, "review")
        has_field(input.review, "object")
      }

      #Input is Gatekeeper
      resource = input.review.object {
        is_gatekeeper
      }

      # Input is not from gatekeeper
      resource = input {
        not is_gatekeeper
      }

      # Set the .metadata.name of the object we are currently working on
      resource_name = resource.metadata.name

      # Set the kind of the object
      resource_kind = resource.kind

      #set taskref_filter
      taskref_filter := resource.spec.tasks[0].taskRef.params

      only_correct_git_value_negate(k) {
        not only_correct_git_value(k)
      }

      only_correct_git_value(k) {
          some i
          contains(resource.spec.tasks[0].taskRef.params[k].value ,org_allowed_git_repos[i])   
      }

      any_git_taskref {    
        some i
          resource.spec.tasks[i].taskRef.resolver == "git"
          upper(resource.spec.tasks[i].taskRef.kind) == "TASK"
          some j
          resource.spec.tasks[0].taskRef.params[j].name == "url"
          only_correct_git_value_negate(j)
      }

      violation[{"msg": msg}] {
        resource_kind == "Pipeline"
          any_git_taskref
          
          msg := sprintf("Denied -- Pipeline %v is using a Git Resolver not in Organization Approved List. Approved Git Resolver URL's %v", [resource_name,org_allowed_git_repos])
      }

      has_field(obj, field) {
        not object.get(obj, field, "N_DEFINED") == "N_DEFINED"
      }

      missing_field(obj, field) {
        obj[field] == ""
      }

      missing_field(obj, field) {
        not has_field(obj, field)
      }
    target: admission.k8s.gatekeeper.sh
status: {}
