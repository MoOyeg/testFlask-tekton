apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: testflask-pipeline
  namespace: 1234-tekton
spec:
  params:
    - default: ""
      name: APP_CONFIG
      type: string
    - default: ""
      name: APP_NAME
      type: string
    - default: ""
      name: APP_MODULE
      type: string
    - default: ""
      name: MYSQL_DATABASE
      type: string
    - default: ""
      name: SECRET_NAME
      type: string
    - default: ""
      name: MYSQL_HOST
      type: string
    - default: ""
      name: NAMESPACE_DEV
      type: string
    - default: ""
      name: NAMESPACE_PROD
      type: string
    - name: GIT_URL
      type: string
    - name: GIT_BRANCH
      type: string
    - name: PYTHON_VERSION
      type: string
    - name: OUTPUT_IMAGE
      type: string
  tasks:
    - name: git-clone-code
      params:
        - name: url
          value: "$(params.GIT_URL)"
        - name: revision
          value: "$(params.GIT_BRANCH)"
        - name: submodules
          value: "true"
        - name: depth
          value: "10"
        - name: sslVerify
          value: "true"
        - name: subdirectory
          value: src
        - name: deleteExisting
          value: "true"
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: testflask-cicd-pvc
    - name: git-info
      params:
        - name: SOURCE_PATH
          value: src
      runAfter:
        - git-clone-code
      taskRef:
        kind: Task
        name: git-info
      workspaces:
        - name: source
          workspace: testflask-cicd-pvc
    - name: python-unittest
      params:
        - name: PYTHON
          value: $(params.PYTHON_VERSION)
        - name: TEST_FILE
          value: test.py
        - name: REQUIREMENTS_FILE
          value: requirements.txt
        - name: SOURCE_PATH
          value: src
      runAfter:
        - git-info
      taskRef:
        kind: Task
        name: python-unittest
      workspaces:
        - name: source
          workspace: testflask-cicd-pvc
    - name: buildah-build
      params:
        - name: IMAGE
          value: $(params.OUTPUT_IMAGE):$(tasks.git-info.results.tag)
        - name: CONTEXT
          value: src
        - name: BUILD_EXTRA_ARGS
          value: '--label name=testFlask --label last_commit_author="$(tasks.git-info.results.author)" --label '
      runAfter:
        - python-unittest
      taskRef:
        kind: Task
        name: buildah
      workspaces:
        - name: source
          workspace: testflask-cicd-pvc
    #S2i can be used as builder
    # - name: s2i-build-code
    #   params:
    #     - name: VERSION
    #       value: "3.8-ubi8"
    #     - name: PATH_CONTEXT
    #       value: src
    #     - name: TLSVERIFY
    #       value: "false"
    #     - name: IMAGE
    #       value: "$(params.OUTPUT_IMAGE)"
    #   runAfter:
    #     - buildah-build
    #   taskRef:
    #     kind: ClusterTask
    #     name: s2i-python
    #   workspaces:
    #     - name: source
    #       workspace: testflask-cicd-pvc
    - name: rox-image-scan
      params:
        - name: rox_api_token
          value: roxsecrets
        - name: rox_central_endpoint
          value: roxsecrets
        - name: output_format
          value: json
        - name: image
          value: $(params.OUTPUT_IMAGE):"$(tasks.git-info.results.tag)"
      runAfter:
        - buildah-build
      taskRef:
        kind: Task
        name: rox-image-scan
    - name: rox-image-check
      params:
        - name: image
          value: $(params.OUTPUT_IMAGE):"$(tasks.git-info.results.tag)"
        - name: rox_api_token
          value: roxsecrets
        - name: rox_central_endpoint
          value: roxsecrets
      taskRef:
        name: rox-image-check
        kind: Task
      runAfter:
        - rox-image-scan
    - name: build-dev-env
      params:
        - name: SCRIPT
          value: >-
            oc new-app $1 --env=MYSQL_DATABASE=$2 -l db=$1 -l app=$3 -n $4
            --as-deployment-config=true;  oc expose svc/$1 -n $4; oc set env
            dc/$1 --from=secret/$5 -n $4; oc label dc/$1 app=$3 --overwrite=true
            -n $4; oc new-app --image-stream $8 --name $3 --env=APP_CONFIG=$6
            --env=APP_MODULE=$7 --env=MYSQL_HOST=$1 --env=MYSQL_DB=$2
            --as-deployment-config=true -n $4; oc expose svc/$3 -n $4
        - name: ARGS
          value:
            - $(params.MYSQL_HOST)
            - $(params.MYSQL_DATABASE)
            - $(params.APP_NAME)
            - $(params.NAMESPACE_DEV)
            - $(params.SECRET_NAME)
            - $(params.APP_CONFIG)
            - $(params.APP_MODULE)
            - $(params.NAMESPACE_DEV)/$(params.APP_NAME):$(tasks.git-info.results.tag)
      runAfter:
        - rox-image-check
      taskRef:
        kind: Task
        name: openshift-client-custom-1-0
    - name: update-prod-dev
      params:
        - name: SCRIPT
          value: >-
            oc rollout pause deployment/$1 -n $3 &&
            oc tag $2/$1:$4 $3/$1:$4 &&            
            oc set triggers deployment/$1 --remove-all -c $1 -n $3 &&
            oc set triggers deploy/$1 --from-image=$1:$4 -c $1 -n $3 &&
            oc set image deployment/$1 $1=$3/$1:$4 -n $3 &&
            oc rollout resume deployment/$1 -n $3
        - name: ARGS
          value:
            - $(params.APP_NAME)
            - $(params.NAMESPACE_DEV)
            - $(params.NAMESPACE_PROD)
            - "$(tasks.git-info.results.tag)"
      runAfter:
        - build-dev-env
      taskRef:
        kind: Task
        name: openshift-client-custom-1-0
  finally:
    - name: cleanup-dev-env
      params:
        - name: SCRIPT
          value: >-
            ((oc get dc/$1 -n $2 && oc delete dc/$1 -n $2) || true);((oc get svc/$1 -n $2 && oc delete svc/$1 -n $2) || true);
            ((oc get route/$1 -n $2 && oc delete route/$1 -n $2) || true);((oc get dc/$3 -n $2 && oc delete dc/$3 -n $2) || true);
            ((oc get svc/$3 -n $2 && oc delete svc/$3 -n $2) || true);((oc get route/$3 -n $2 && oc delete route/$3 -n $2) || true)
        - name: ARGS
          value:
            - $(params.MYSQL_HOST)
            - $(params.NAMESPACE_DEV)
            - $(params.APP_NAME)
      taskRef:
        kind: Task
        name: openshift-client-custom-1-0
  workspaces:
    - name: testflask-cicd-pvc
#Change images without using oc specific commands
#oc annotate deployment/$1 image.openshift.io/triggers='[{"from":{"kind":"ImageStreamTag","name":"'$1:$4'"},"fieldPath":"spec.template.spec.containers[?(@.name==\"'$1'\")].image"}]'
#oc patch deployment/$1 --patch '{"spec": {"template": {"spec": {"containers": [{"name": "'$1'","image": "'$3/$1:$4'"}]}}}}' -n $3 &&
